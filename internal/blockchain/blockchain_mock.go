// Code generated by MockGen. DO NOT EDIT.
// Source: blockchain.go

// Package blockchain is a generated GoMock package.
package blockchain

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockchain is a mock of Blockchain interface
type MockBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainMockRecorder
}

// MockBlockchainMockRecorder is the mock recorder for MockBlockchain
type MockBlockchainMockRecorder struct {
	mock *MockBlockchain
}

// NewMockBlockchain creates a new mock instance
func NewMockBlockchain(ctrl *gomock.Controller) *MockBlockchain {
	mock := &MockBlockchain{ctrl: ctrl}
	mock.recorder = &MockBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockchain) EXPECT() *MockBlockchainMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method
func (m *MockBlockchain) CreateWallet(ctx context.Context) (AccountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx)
	ret0, _ := ret[0].(AccountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet
func (mr *MockBlockchainMockRecorder) CreateWallet(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockBlockchain)(nil).CreateWallet), ctx)
}

// SendStakes mocks base method
func (m *MockBlockchain) SendStakes(ctx context.Context, address string, amount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendStakes", ctx, address, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendStakes indicates an expected call of SendStakes
func (mr *MockBlockchainMockRecorder) SendStakes(ctx, address, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStakes", reflect.TypeOf((*MockBlockchain)(nil).SendStakes), ctx, address, amount)
}
