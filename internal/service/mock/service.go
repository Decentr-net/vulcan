// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockService) Register(ctx context.Context, email, address string, referralCode *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, email, address, referralCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockServiceMockRecorder) Register(ctx, email, address, referralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), ctx, email, address, referralCode)
}

// Confirm mocks base method
func (m *MockService) Confirm(ctx context.Context, owner, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, owner, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirm indicates an expected call of Confirm
func (mr *MockServiceMockRecorder) Confirm(ctx, owner, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockService)(nil).Confirm), ctx, owner, code)
}

// GetOwnReferralCode mocks base method
func (m *MockService) GetOwnReferralCode(ctx context.Context, address string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnReferralCode", ctx, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnReferralCode indicates an expected call of GetOwnReferralCode
func (mr *MockServiceMockRecorder) GetOwnReferralCode(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnReferralCode", reflect.TypeOf((*MockService)(nil).GetOwnReferralCode), ctx, address)
}

// GetRegistrationReferralCode mocks base method
func (m *MockService) GetRegistrationReferralCode(ctx context.Context, address string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationReferralCode", ctx, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationReferralCode indicates an expected call of GetRegistrationReferralCode
func (mr *MockServiceMockRecorder) GetRegistrationReferralCode(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationReferralCode", reflect.TypeOf((*MockService)(nil).GetRegistrationReferralCode), ctx, address)
}

// TrackReferralBrowserInstallation mocks base method
func (m *MockService) TrackReferralBrowserInstallation(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackReferralBrowserInstallation", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackReferralBrowserInstallation indicates an expected call of TrackReferralBrowserInstallation
func (mr *MockServiceMockRecorder) TrackReferralBrowserInstallation(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackReferralBrowserInstallation", reflect.TypeOf((*MockService)(nil).TrackReferralBrowserInstallation), ctx, address)
}
