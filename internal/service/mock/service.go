// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	referral "github.com/Decentr-net/vulcan/internal/referral"
	storage "github.com/Decentr-net/vulcan/internal/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockService) Register(ctx context.Context, email, address string, referralCode *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, email, address, referralCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockServiceMockRecorder) Register(ctx, email, address, referralCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockService)(nil).Register), ctx, email, address, referralCode)
}

// Confirm mocks base method
func (m *MockService) Confirm(ctx context.Context, owner, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Confirm", ctx, owner, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// Confirm indicates an expected call of Confirm
func (mr *MockServiceMockRecorder) Confirm(ctx, owner, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*MockService)(nil).Confirm), ctx, owner, code)
}

// GetRegisterStats mocks base method
func (m *MockService) GetRegisterStats(ctx context.Context) ([]*storage.RegisterStats, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisterStats", ctx)
	ret0, _ := ret[0].([]*storage.RegisterStats)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRegisterStats indicates an expected call of GetRegisterStats
func (mr *MockServiceMockRecorder) GetRegisterStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisterStats", reflect.TypeOf((*MockService)(nil).GetRegisterStats), ctx)
}

// GetOwnReferralCode mocks base method
func (m *MockService) GetOwnReferralCode(ctx context.Context, address string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwnReferralCode", ctx, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOwnReferralCode indicates an expected call of GetOwnReferralCode
func (mr *MockServiceMockRecorder) GetOwnReferralCode(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwnReferralCode", reflect.TypeOf((*MockService)(nil).GetOwnReferralCode), ctx, address)
}

// GetReferralConfig mocks base method
func (m *MockService) GetReferralConfig() referral.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralConfig")
	ret0, _ := ret[0].(referral.Config)
	return ret0
}

// GetReferralConfig indicates an expected call of GetReferralConfig
func (mr *MockServiceMockRecorder) GetReferralConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralConfig", reflect.TypeOf((*MockService)(nil).GetReferralConfig))
}

// GetRegistrationReferralCode mocks base method
func (m *MockService) GetRegistrationReferralCode(ctx context.Context, address string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationReferralCode", ctx, address)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationReferralCode indicates an expected call of GetRegistrationReferralCode
func (mr *MockServiceMockRecorder) GetRegistrationReferralCode(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationReferralCode", reflect.TypeOf((*MockService)(nil).GetRegistrationReferralCode), ctx, address)
}

// TrackReferralBrowserInstallation mocks base method
func (m *MockService) TrackReferralBrowserInstallation(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackReferralBrowserInstallation", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrackReferralBrowserInstallation indicates an expected call of TrackReferralBrowserInstallation
func (mr *MockServiceMockRecorder) TrackReferralBrowserInstallation(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackReferralBrowserInstallation", reflect.TypeOf((*MockService)(nil).TrackReferralBrowserInstallation), ctx, address)
}

// GetReferralTrackingStats mocks base method
func (m *MockService) GetReferralTrackingStats(ctx context.Context, address string) ([]*storage.ReferralTrackingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralTrackingStats", ctx, address)
	ret0, _ := ret[0].([]*storage.ReferralTrackingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralTrackingStats indicates an expected call of GetReferralTrackingStats
func (mr *MockServiceMockRecorder) GetReferralTrackingStats(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralTrackingStats", reflect.TypeOf((*MockService)(nil).GetReferralTrackingStats), ctx, address)
}

// CreateDLoanRequest mocks base method
func (m *MockService) CreateDLoanRequest(ctx context.Context, address, firstName, lastName string, pdv float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDLoanRequest", ctx, address, firstName, lastName, pdv)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDLoanRequest indicates an expected call of CreateDLoanRequest
func (mr *MockServiceMockRecorder) CreateDLoanRequest(ctx, address, firstName, lastName, pdv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDLoanRequest", reflect.TypeOf((*MockService)(nil).CreateDLoanRequest), ctx, address, firstName, lastName, pdv)
}

// ListDloanRequests mocks base method
func (m *MockService) ListDloanRequests(ctx context.Context, take, skip int) ([]*storage.DLoan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDloanRequests", ctx, take, skip)
	ret0, _ := ret[0].([]*storage.DLoan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDloanRequests indicates an expected call of ListDloanRequests
func (mr *MockServiceMockRecorder) ListDloanRequests(ctx, take, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDloanRequests", reflect.TypeOf((*MockService)(nil).ListDloanRequests), ctx, take, skip)
}

// RegisterTestnetAccount mocks base method
func (m *MockService) RegisterTestnetAccount(ctx context.Context, address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTestnetAccount", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterTestnetAccount indicates an expected call of RegisterTestnetAccount
func (mr *MockServiceMockRecorder) RegisterTestnetAccount(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTestnetAccount", reflect.TypeOf((*MockService)(nil).RegisterTestnetAccount), ctx, address)
}

// CheckRecaptcha mocks base method
func (m *MockService) CheckRecaptcha(ctx context.Context, action, recaptchaResponse string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRecaptcha", ctx, action, recaptchaResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRecaptcha indicates an expected call of CheckRecaptcha
func (mr *MockServiceMockRecorder) CheckRecaptcha(ctx, action, recaptchaResponse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRecaptcha", reflect.TypeOf((*MockService)(nil).CheckRecaptcha), ctx, action, recaptchaResponse)
}
