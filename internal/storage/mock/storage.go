// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	storage "github.com/Decentr-net/vulcan/internal/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetRequestByOwner mocks base method
func (m *MockStorage) GetRequestByOwner(ctx context.Context, owner string) (*storage.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestByOwner", ctx, owner)
	ret0, _ := ret[0].(*storage.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestByOwner indicates an expected call of GetRequestByOwner
func (mr *MockStorageMockRecorder) GetRequestByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestByOwner", reflect.TypeOf((*MockStorage)(nil).GetRequestByOwner), ctx, owner)
}

// GetRequestByAddress mocks base method
func (m *MockStorage) GetRequestByAddress(ctx context.Context, address string) (*storage.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestByAddress", ctx, address)
	ret0, _ := ret[0].(*storage.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestByAddress indicates an expected call of GetRequestByAddress
func (mr *MockStorageMockRecorder) GetRequestByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestByAddress", reflect.TypeOf((*MockStorage)(nil).GetRequestByAddress), ctx, address)
}

// SetConfirmed mocks base method
func (m *MockStorage) SetConfirmed(ctx context.Context, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfirmed", ctx, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfirmed indicates an expected call of SetConfirmed
func (mr *MockStorageMockRecorder) SetConfirmed(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfirmed", reflect.TypeOf((*MockStorage)(nil).SetConfirmed), ctx, owner)
}

// UpsertRequest mocks base method
func (m *MockStorage) UpsertRequest(ctx context.Context, owner, email, address, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertRequest", ctx, owner, email, address, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertRequest indicates an expected call of UpsertRequest
func (mr *MockStorageMockRecorder) UpsertRequest(ctx, owner, email, address, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertRequest", reflect.TypeOf((*MockStorage)(nil).UpsertRequest), ctx, owner, email, address, code)
}

// CreateReferral mocks base method
func (m *MockStorage) CreateReferral(ctx context.Context, referral *storage.Referral) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReferral", ctx, referral)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReferral indicates an expected call of CreateReferral
func (mr *MockStorageMockRecorder) CreateReferral(ctx, referral interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReferral", reflect.TypeOf((*MockStorage)(nil).CreateReferral), ctx, referral)
}
