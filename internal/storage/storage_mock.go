// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// IsRegistered mocks base method
func (m *MockStorage) IsRegistered(ctx context.Context, owner, address string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRegistered", ctx, owner, address)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRegistered indicates an expected call of IsRegistered
func (mr *MockStorageMockRecorder) IsRegistered(ctx, owner, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRegistered", reflect.TypeOf((*MockStorage)(nil).IsRegistered), ctx, owner, address)
}

// CreateRequest mocks base method
func (m *MockStorage) CreateRequest(ctx context.Context, owner, address, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, owner, address, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRequest indicates an expected call of CreateRequest
func (mr *MockStorageMockRecorder) CreateRequest(ctx, owner, address, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockStorage)(nil).CreateRequest), ctx, owner, address, code)
}

// GetAccountAddress mocks base method
func (m *MockStorage) GetAccountAddress(ctx context.Context, owner, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAddress", ctx, owner, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAddress indicates an expected call of GetAccountAddress
func (mr *MockStorageMockRecorder) GetAccountAddress(ctx, owner, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAddress", reflect.TypeOf((*MockStorage)(nil).GetAccountAddress), ctx, owner, code)
}

// MarkRequestProcessed mocks base method
func (m *MockStorage) MarkRequestProcessed(ctx context.Context, owner string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkRequestProcessed", ctx, owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkRequestProcessed indicates an expected call of MarkRequestProcessed
func (mr *MockStorageMockRecorder) MarkRequestProcessed(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkRequestProcessed", reflect.TypeOf((*MockStorage)(nil).MarkRequestProcessed), ctx, owner)
}
